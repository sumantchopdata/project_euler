# problems 21-30 from projecteuler.net
import math

# problem 21
# evaluate the sum of all amicable numbers under 10000
def d(n):
    s = 0
    for i in range(1, n):
        if n % i == 0:
            s += i
    return s

s = 0
for i in range(1, 10000):
    if d(d(i)) == i and d(i) != i:
        s += i

# problem 22
# what is the total of all the name scores in the file?
        
with open('0022_names.txt', 'r') as f:
    names = f.read().split(',')

names = [name.strip('"') for name in names]
names.sort()

def name_score(name):
    '''
    returns the score of a name based on the sum of the values of its letters.
    We subtract 64 from the ord of each letter to get the value of the letter
    in the alphabet.
    '''
    return sum([ord(c) - 64 for c in name])

s = 0
for i, name in enumerate(names):
    s += (i+1) * name_score(name)
print(s)

# problem 23
# find the sum of all the positive integers which cannot be written as the sum
# of two abundant numbers

def d(n):
    s = 0
    for i in range(1, n):
        if n % i == 0:
            s += i
    return s

abundant = []

for i in range(1, 28124):
    if d(i) > i:
        abundant.append(i)

sums = set()
for i in range(len(abundant)):
    for j in range(i, len(abundant)):
        sums.add(abundant[i] + abundant[j])

s = 0
for i in range(1, 28124):
    if i not in sums:
        s += i
print(s)

# problem 24
# what is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9?

def nth_permutation(n, digits):
    '''
    returns the nth permutation of the digits in digits
    '''
    if len(digits) == 1:
        return digits
    f = math.factorial(len(digits) - 1)
    i = math.floor(n / f)
    return [digits[i]] + nth_permutation(n % f, digits[:i] + digits[i+1:])

for i in nth_permutation(999999, [0,1,2,3,4,5,6,7,8,9]):
    print(i, end='')

# problem 25
# what is the first term in the Fibonacci sequence to contain 1000 digits?
    
a = 1
b = 0
n = 1
while len(str(a)) != 1000:
    a, b = a+b, a
    n = n + 1
print("%d has 1000 digits, n = %d" % (a, n))

# problem 26
# find the value of d < 1000 for which 1/d contains the longest recurring cycle
# in its decimal fraction part

def cycle(n):
    myList = [1]
    t = 1
    f = (10**t) % n
    while myList.count(f) == 0:
        myList.append(f)
        t = t + 1
        f = (10**t) % n
    try:
        s = myList.index(f)
    except ValueError:
        s = 0
    return t-s

def solve():
    mx, val = 0, 0
    for n in range(2, 1000):
        m = cycle(n)
        if m > mx:
            mx = m
            val = n
    print(mx, val)

solve()

# problem 27
# find the product of the coefficients, a and b, for the quadratic expression
# that produces the maximum number of primes for consecutive values of n,
# starting with n = 0

def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    for i in range(2, math.ceil(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def quadratic(a, b, n):
    return n**2 + a*n + b

max_primes = 0
max_a = 0
max_b = 0

for a in range(-999, 1000):
    for b in range(-1000, 1001):
        n = 0
        while is_prime(quadratic(a, b, n)):
            n += 1
        if n > max_primes:
            max_primes = n
            max_a = a
            max_b = b

print(max_a * max_b)

# problem 28
# what is the sum of the numbers on the diagonals in a 1001 by 1001 spiral
# formed in the same way?

def spiral_sum(n):
    '''
    returns the sum of the numbers on the diagonals in an n by n spiral
    '''
    s = 1
    for i in range(3, n+1, 2):
        s += 4 * i**2 - 6 * i + 6
    return s

print(spiral_sum(1001))

# problem 29
# how many distinct terms are in the sequence generated by a^b for 2 <= a <= 100
# and 2 <= b <= 100?

terms = set()
for a in range(2, 101):
    for b in range(2, 101):
        terms.add(a**b)
print(len(terms))

# problem 30
# find the sum of all the numbers that can be written as the sum of fifth
# powers of their digits

def sum_of_fifth_powers(n):
    s = 0
    for c in str(n):
        s += int(c)**5
    return s

s = 0
for i in range(2, 1000000):
    if i == sum_of_fifth_powers(i):
        s += i
print(s)